uniform float iTime;
uniform float2 iResolution;

float PI = 3.14159265359;

// Noise by IQ <3 https://www.shadertoy.com/view/Msf3WH
vec2 hash( vec2 p ) { // this is good for me
	p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );
	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}
float noise( in vec2 p ) {
    const float K1 = (sqrt(3.)-1.)/2.;
    const float K2 = (3.-sqrt(3.))/6.;

	vec2  i = floor( p + (p.x+p.y)*K1 );
    vec2  a = p - i + (i.x+i.y)*K2;
    float m = step(a.y,a.x);
    vec2  o = vec2(m,1.0-m);
    vec2  b = a - o + K2;
	vec2  c = a - 1.0 + 2.0*K2;
    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
	vec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    return dot( n, vec3(70.0) );
}

half4 main(vec2 fragCoord) {
    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;
    vec3 color = vec3(uv.x, uv.y, length(uv));
    uv.x += 1.;
    for (float i = 12.1; i >= 0.; i--) {
        float r = .2 + i * uv.x * .08;

        float c1 = length(uv + sin(iTime - i * (uv.y + uv.x)) * .03);
        float cc1 = smoothstep(r+.0001, r, c1);
        color = mix(
            color,
            vec3(
                length(uv) * i * .1,
                uv.y + i * .22,
                i * .23
            ),
            cc1 * i * .006
        );
    }

    return vec4(color,1.0);
}
